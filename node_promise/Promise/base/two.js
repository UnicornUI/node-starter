// --------------------------------------------------------------------
// 宏任务 与 微任务的执行顺序
// --------------------------------------------------------------------
// setTimeout(), setInterval() 等函数添加的宏任务
// promise 中 then 添加的是微任务
// 从以下程序的结果中可以看出,在 js 中程序中的任务优先级如下表
// --------------------------------------------------------------------
// 主任务 > 微任务 > 宏任务
// --------------------------------------------------------------------
setTimeout(() => {
  console.log("宏任务");
}, 0);
new Promise((resolve, reject) => {
  // 这是一个回调通知，只有这个通知执行了，才会产生微任务
  // 这里回调通知会改变promise状态，这个状态的改变是不可逆的，
  // 多次调用，只会执行第一个，状态不能二次改变。
  resolve();
  console.log("--------------");
}).then(
  (value) => {
    console.log("微任务");
  },
  (error) => {}
);
console.log("主任务");
// --------------------------------------------------------------------
// 以下场景中，微任务由宏任务执行过程中产生，这时候应该是宏任务执行
// 完成，微任务开始生成，之后才有微任务执行
// --------------------------------------------------------------------
let promise = new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log("setTimeout");
    resolve();
  }, 0);
}).then(
  (value) => {
    console.log("成功");
  },
  (error) => {}
);
